*Fonctionnalités version 1

-fonctionnalité 1 :  Création d'un labyrinthe par défaut
-          descriptif texte : Au lancement du Niveau, un labyrinthe par défaut est créé et le personnage est placé au centre de celui-ci.
-          critères de validation :

		• Le labyrinthe par défaut utilise une liste de case qui constituront l'arene;
		• Le constructeur par defaut prendra un tableau a deux dimension de 10, 10;
		• getter qui retourne la liste de case du labyrinthe;
		• setter qui permet de changer la case a une coordonnee X, Y ;

-fonctionnalité 2 :  Création d'une classe case qui sera traversable ou non
-          descriptif texte : la classe case possèdera une personnage et un attribut traversable. Un mur aura alors un attribut traversable à true et un chemin pourra avoir un occupant
-          critères de validation :
		
		• méthode estTraversable permettant de savoir si la case est traversable ou non selon son attribut occupant et traversable
        • méthode setter permettant de définir l'occupant (Personnage sur la case)
        • getter qui retourne l'occupant de la case



-fonctionnamité 3 : Création de Personnages
-          descriptif texte : un personnage est une classe abstraite qui sera hérité par des monstres ou un aventurier qui correspond au hero controlé par l'utilisateur
-          critères de validation : 
		• un personnage a une position x et y
        • un personnage a une case qui est la case qu'il occupe
        • deux getter qui retourne chacun les coordonée X et Y de la case;
        • création d'un aventurier et d'un monstre immobile qui herite de personnage

-fonctionnamité 4 : Création d'un systeme de déplacement pour les personnages
-          descriptif texte : le personnage pourra se déplacer sur les cases qui sont traversables et qui n'ont pas d'occupant
-          critères de validation : 
		• un personnage a une orientation qui correspond à la direction dans laquelle il se déplace
        • méthode permettant au personnage de se déplacer en actualisant ses coordonées et en changeant de case qu'il occupe
        • méthodes dans la class case retournant la case devant le personnage selon son orientation 
        • deux getter qui retourne l'orientation du personnage et l'autre qui retourne la case sur laquel est le personnage
        • un setter qui modifie l'orientation de personnage en fonction de son déplacement
		


  