<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><help_text>&lt;diagram program="umletino" version="14.4.0-SNAPSHOT"&gt;&lt;zoom_level&gt;10&lt;/zoom_level&gt;&lt;element&gt;&lt;id&gt;Relation&lt;/id&gt;&lt;coordinates&gt;&lt;x&gt;790&lt;/x&gt;&lt;y&gt;534&lt;/y&gt;&lt;w&gt;90&lt;/w&gt;&lt;h&gt;180&lt;/h&gt;&lt;/coordinates&gt;&lt;panel_attributes&gt;lt=&amp;lt;-
aventurier
m1=1
m2=*&lt;/panel_attributes&gt;&lt;additional_attributes&gt;10;160;30;10&lt;/additional_attributes&gt;&lt;/element&gt;&lt;/diagram&gt;// Uncomment the following line to change the fontsize and font:
fontsize=10
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text><element><id>UMLClass</id><coordinates><x>0</x><y>394</y><w>230</w><h>180</h></coordinates><panel_attributes>Labyrinthe
--
- listeCases : Case[][] 
- sortie : int[]
--
+ Labyrinthe()
+ casesAdjacentes(int,int) : Cases[]
+ getCase(int,int,char) : Case
+ setListeCase(int,int,Case) : void
+ setSortie(int,int) : void
+ cherckSortie(int,int) : boolean
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>20</x><y>964</y><w>200</w><h>180</h></coordinates><panel_attributes>Case
--
- traversable : boolean
- occupant : Personnage
--
+ Case(boolean)
+ estTraversable() : boolean
+ setOccupant(Personnage) : void
+ getOccupant() : Personnage
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>110</x><y>564</y><w>80</w><h>420</h></coordinates><panel_attributes>lt=&lt;-
listeCases
m1=*
m2=*</panel_attributes><additional_attributes>10;400;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>750</x><y>334</y><w>260</w><h>210</h></coordinates><panel_attributes>Niveau
--
- labyrinthe : Labyrinthe 
- listeMonstre : ArrayList&lt;Monstre&gt;
- aventurier : Aventurier
- url : String
--
+ Niveau(String,String)
+ deplacerAventurier(Commande) : void
+ deplaceMonstres() : void
+ aventurierAttaque(Commande) : void
+ monstreAttaque() : void
+ monstreMort(Personnage) : void
+ chargerLabyritne(String) : void

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>220</x><y>434</y><w>550</w><h>50</h></coordinates><panel_attributes>lt=&lt;-
labyrinthe
m1=1
m2=*</panel_attributes><additional_attributes>10;20;530;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>760</x><y>944</y><w>230</w><h>350</h></coordinates><panel_attributes>&lt;&lt;Abstract&gt;&gt;
Personnage
--
# x : int
# y : int
# pv : int
# degat : int
- orientation : char
# caseOccupe : Case
_+ NORD: char = 'N'_
_+ SUD: char = 'S'_
_+ OUEST: char = 'O'_
_+ EST: char = 'E'_
--
+ Personnage(int,int,int,int,Case)
+ attaquer(Case) : void
+ prendreDegat(int) : void
/ etreAventurier() : boolean/
+setOrientation(char) : void
--
+getX() : int
+getY() : int
+getPv() : int
+getDegat() : int
+getCase() : Case
+getOrientation() : char
+etreMort() : boolean


</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>930</x><y>694</y><w>270</w><h>150</h></coordinates><panel_attributes>&lt;&lt;Abstract&gt;&gt;
Monstre
--

--
+ Monstre(int,int,int,int,Case)
/ seDeplacer(Case[]) : void /
+ etreAventurier() : boolean
--





</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>920</x><y>834</y><w>50</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;110;30;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1340</x><y>644</y><w>300</w><h>130</h></coordinates><panel_attributes>MonstreImmobile
--

--
+ MonstreImmobile(int,int,int,int,Case)
+ seDeplacer(Cases[]) : void





</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1190</x><y>734</y><w>170</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;150;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1190</x><y>814</y><w>170</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;150;10</additional_attributes></element><element><id>Relation</id><coordinates><x>790</x><y>834</y><w>50</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>30;110;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>550</x><y>694</y><w>270</w><h>150</h></coordinates><panel_attributes>Aventurier
--

--
+ Aventurier(int,int,int,int,Case)
+ seDeplacer(Cases[]) : void
+ etreAventurier() : boolean
--





</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>790</x><y>534</y><w>90</w><h>180</h></coordinates><panel_attributes>lt=&lt;-
aventurier
m1=1
m2=*</panel_attributes><additional_attributes>10;160;30;10</additional_attributes></element><element><id>Relation</id><coordinates><x>920</x><y>534</y><w>100</w><h>180</h></coordinates><panel_attributes>lt=&lt;-
listeMonstre
m1=*
m2=*</panel_attributes><additional_attributes>30;160;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1340</x><y>794</y><w>300</w><h>130</h></coordinates><panel_attributes>MonstreDeplacementAleatoire
--

--
+ MonstreDeplacementAleatoire(int,int,int,int,Case)
+ seDeplacer(Cases[]) : void





</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>210</x><y>1044</y><w>570</w><h>50</h></coordinates><panel_attributes>lt=&lt;-&gt;
caseOccupe
occupant
m1=*
m2=*</panel_attributes><additional_attributes>10;20;550;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>749</x><y>0</y><w>310</w><h>250</h></coordinates><panel_attributes>Donjon
--
- listeNiveau : ArrayList&lt;Niveau&gt;
- niveauActuelle : int
- iteration : int
_-cheminNiveau: String = "projet_zeldiablo/niveaux/"_
_-cheminFond: String = "projet_zeldiablo/niveaux/"_
_-NOMBRENIVEAUX: int = 3_

--
+ Donjon()
+ getListeNiveau() : ArrayList&lt;Niveau&gt;
+ getNiveauActuel() : int
+ passerNiveauSuivant() : void

--
+ evoluer(Commande) : void
+ etreFini() : boolean
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>858</x><y>240</y><w>80</w><h>110</h></coordinates><panel_attributes>lt=&lt;-
liseNiveau
m1=1
m2=*</panel_attributes><additional_attributes>10;90;10;10</additional_attributes></element></diagram>